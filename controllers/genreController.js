/*const Genre = require("../models/genre");
const asyncHandler = require("express-async-handler");

// Display list of all Genres.
exports.genre_list = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre list");
});

// Display detail page for a specific Genre.
exports.genre_detail = asyncHandler(async (req, res, next) => {
  res.send(`NOT IMPLEMENTED: Genre detail: ${req.params.id}`);
});

// Display Genre create form on GET.
exports.genre_create_get = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre create GET");
});

// Handle Genre create on POST.
exports.genre_create_post = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre create POST");
});

// Display Genre delete form on GET.
exports.genre_delete_get = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre delete GET");
});

// Handle Genre delete on POST.
exports.genre_delete_post = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre delete POST");
});

// Display Genre update form on GET.
exports.genre_update_get = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre update GET");
});

// Handle Genre update on POST.
exports.genre_update_post = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre update POST");
});
const Genre = require("../models/genre");
const asyncHandler = require("express-async-handler");
const Book = require("../models/book");//–¥–æ–¥–∞–ª–∞

/*Display list of all Genres.
exports.genre_list = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre list");
});


exports.genre_list = asyncHandler(async (req, res, next) => {
  const allGenres = await Genre.find().sort({ name: 1 }).exec();

  res.render("genre_list", {
    title: "–°–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä—ñ–≤",
    genre_list: allGenres,
  });
});

// Display detail page for a specific Genre.
exports.genre_detail = asyncHandler(async (req, res, next) => {
  res.send(`NOT IMPLEMENTED: Genre detail: ${req.params.id}`);
});

// Display Genre create form on GET.
exports.genre_create_get = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre create GET");
});

// Handle Genre create on POST.
exports.genre_create_post = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre create POST");
});

// Display Genre delete form on GET.
exports.genre_delete_get = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre delete GET");
});

// Handle Genre delete on POST.
exports.genre_delete_post = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre delete POST");
});

// Display Genre update form on GET.
exports.genre_update_get = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre update GET");
});

// Handle Genre update on POST.
exports.genre_update_post = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre update POST");
});
*

////////////////////////////////////////////////////////////
const Genre = require("../models/genre");
const Book = require("../models/book");
const asyncHandler = require("express-async-handler");

// ‚úÖ –í–∏–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∂–∞–Ω—Ä—ñ–≤
exports.genre_list = asyncHandler(async (req, res, next) => {
  const allGenres = await Genre.find().sort({ name: 1 }).exec();

  res.render("genre_list", {
    title: "–°–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä—ñ–≤",
    genre_list: allGenres,
  });
});

// ‚úÖ –í–∏–≤–µ—Å—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–µ—Ç–∞–ª–µ–π –∂–∞–Ω—Ä—É
exports.genre_detail = asyncHandler(async (req, res, next) => {
  const [genre, booksInGenre] = await Promise.all([
    Genre.findById(req.params.id).exec(),
    Book.find({ genre: req.params.id }, "title summary").exec(),
  ]);

  if (genre === null) {
    const err = new Error("–ñ–∞–Ω—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    err.status = 404;
    return next(err);
  }

  res.render("genre_detail", {
    title: "–î–µ—Ç–∞–ª—ñ –∂–∞–Ω—Ä—É",
    genre: genre,
    genre_books: booksInGenre,
  });
});

// üîß –§–æ—Ä–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∂–∞–Ω—Ä—É (GET)
exports.genre_create_get = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre create GET");
});

// üîß –û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∂–∞–Ω—Ä—É (POST)
exports.genre_create_post = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre create POST");
});

// üîß –§–æ—Ä–º–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∂–∞–Ω—Ä—É (GET)
exports.genre_delete_get = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre delete GET");
});

// üîß –û–±—Ä–æ–±–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∂–∞–Ω—Ä—É (POST)
exports.genre_delete_post = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre delete POST");
});

// üîß –§–æ—Ä–º–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∂–∞–Ω—Ä—É (GET)
exports.genre_update_get = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre update GET");
});

// üîß –û–±—Ä–æ–±–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∂–∞–Ω—Ä—É (POST)
exports.genre_update_post = asyncHandler(async (req, res, next) => {
  res.send("NOT IMPLEMENTED: Genre update POST");
});///////////////////////////////////////////////////*/
const Genre = require("../models/genre");
const Book = require("../models/book");
const asyncHandler = require("express-async-handler");
const { body, validationResult } = require("express-validator");

// –í–∏–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∂–∞–Ω—Ä—ñ–≤
exports.genre_list = asyncHandler(async (req, res, next) => {
  const allGenres = await Genre.find().sort({ name: 1 }).exec();

  res.render("genre_list", {
    title: "–°–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä—ñ–≤",
    genre_list: allGenres,
  });
});

// –í–∏–≤–µ—Å—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–µ—Ç–∞–ª–µ–π –∂–∞–Ω—Ä—É
exports.genre_detail = asyncHandler(async (req, res, next) => {
  const [genre, booksInGenre] = await Promise.all([
    Genre.findById(req.params.id).exec(),
    Book.find({ genre: req.params.id }, "title summary").exec(),
  ]);

  if (genre === null) {
    const err = new Error("–ñ–∞–Ω—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    err.status = 404;
    return next(err);
  }

  res.render("genre_detail", {
    title: "–î–µ—Ç–∞–ª—ñ –∂–∞–Ω—Ä—É",
    genre: genre,
    genre_books: booksInGenre,
  });
});

// –§–æ—Ä–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∂–∞–Ω—Ä—É (GET)
exports.genre_create_get = asyncHandler(async (req, res, next) => {
  res.render("genre_form", { title: "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∂–∞–Ω—Ä" });
});

// –û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∂–∞–Ω—Ä—É (POST)
exports.genre_create_post = [
  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—è name
  body("name")
    .trim()
    .isLength({ min: 3 })
    .withMessage("–ù–∞–∑–≤–∞ –∂–∞–Ω—Ä—É –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 3 —Å–∏–º–≤–æ–ª–∏.")
    .escape(),

  asyncHandler(async (req, res, next) => {
    const errors = validationResult(req);

    const genre = new Genre({ name: req.body.name });

    if (!errors.isEmpty()) {
      // –Ñ –ø–æ–º–∏–ª–∫–∏ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–∏ —Ñ–æ—Ä–º—É –∑ –ø–æ–º–∏–ª–∫–∞–º–∏
      res.render("genre_form", {
        title: "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∂–∞–Ω—Ä",
        genre: genre,
        errors: errors.array(),
      });
      return;
    } else {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –∂–∞–Ω—Ä –≤–∂–µ —ñ—Å–Ω—É—î
      const existingGenre = await Genre.findOne({
        name: req.body.name,
      }).collation({ locale: "en", strength: 2 });

      if (existingGenre) {
        // –Ø–∫—â–æ –∂–∞–Ω—Ä —ñ—Å–Ω—É—î ‚Äî —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ –π–æ–≥–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        res.redirect(existingGenre.url);
      } else {
        await genre.save();
        res.redirect(genre.url);
      }
    }
  }),
];

// –§–æ—Ä–º–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∂–∞–Ω—Ä—É (GET)
exports.genre_delete_get = asyncHandler(async (req, res, next) => {
  const [genre, genre_books] = await Promise.all([
    Genre.findById(req.params.id).exec(),
    Book.find({ genre: req.params.id }).exec(),
  ]);

  if (genre === null) {
    // –Ø–∫—â–æ –∂–∞–Ω—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä—ñ–≤
    res.redirect("/catalog/genres");
    return;
  }

  res.render("genre_delete", {
    title: "–í–∏–¥–∞–ª–µ–Ω–Ω—è –∂–∞–Ω—Ä—É",
    genre: genre,
    genre_books: genre_books,
  });
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∂–∞–Ω—Ä—É (POST)
exports.genre_delete_post = asyncHandler(async (req, res, next) => {
  const [genre, genre_books] = await Promise.all([
    Genre.findById(req.body.genreid).exec(),
    Book.find({ genre: req.body.genreid }).exec(),
  ]);

  if (genre_books.length > 0) {
    // –Ø–∫—â–æ —É –∂–∞–Ω—Ä—É —î –∫–Ω–∏–≥–∏ ‚Äî –∑–Ω–æ–≤—É –ø–æ–∫–∞–∑–∞—Ç–∏ —Ñ–æ—Ä–º—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
    res.render("genre_delete", {
      title: "–í–∏–¥–∞–ª–µ–Ω–Ω—è –∂–∞–Ω—Ä—É",
      genre: genre,
      genre_books: genre_books,
    });
    return;
  } else {
    // –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–Ω–∏–≥ ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –∂–∞–Ω—Ä
    await Genre.findByIdAndRemove(req.body.genreid);
    res.redirect("/catalog/genres");
  }
});

// –§–æ—Ä–º–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∂–∞–Ω—Ä—É (GET)
exports.genre_update_get = asyncHandler(async (req, res, next) => {
  const genre = await Genre.findById(req.params.id).exec();

  if (genre === null) {
    const err = new Error("–ñ–∞–Ω—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    err.status = 404;
    return next(err);
  }

  res.render("genre_form", {
    title: "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∂–∞–Ω—Ä",
    genre: genre,
  });
});

// –û–±—Ä–æ–±–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∂–∞–Ω—Ä—É (POST)
exports.genre_update_post = [
  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—è name
  body("name")
    .trim()
    .isLength({ min: 3 })
    .withMessage("–ù–∞–∑–≤–∞ –∂–∞–Ω—Ä—É –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 3 —Å–∏–º–≤–æ–ª–∏.")
    .escape(),

  asyncHandler(async (req, res, next) => {
    const errors = validationResult(req);

    const genre = new Genre({
      name: req.body.name,
      _id: req.params.id, // –≤–∞–∂–ª–∏–≤–æ –∑–±–µ—Ä–µ–≥—Ç–∏ id –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    });

    if (!errors.isEmpty()) {
      // –Ñ –ø–æ–º–∏–ª–∫–∏ ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ñ–æ—Ä–º—É –ø–æ–≤—Ç–æ—Ä–Ω–æ
      res.render("genre_form", {
        title: "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∂–∞–Ω—Ä",
        genre: genre,
        errors: errors.array(),
      });
      return;
    } else {
      // –û–Ω–æ–≤–∏—Ç–∏ –∂–∞–Ω—Ä
      const updatedGenre = await Genre.findByIdAndUpdate(req.params.id, genre, {
        new: true,
      });
      res.redirect(updatedGenre.url);
    }
  }),
];


