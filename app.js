
/*const express = require('express');
const connectDB = require('./db');
const queriesRouter = require("./routes/queries");

const app = express();

connectDB();

app.use("/queries", queriesRouter);  // —Ç—É—Ç –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});

module.exports = app;
const mongoose = require("mongoose");
const Author = require("./models/author");
const Book = require("./models/book");

async function createTestData() {
  try {
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    await mongoose.connect('mongodb://localhost:27017/yourdb', { useNewUrlParser: true, useUnifiedTopology: true });

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î –∞–≤—Ç–æ—Ä, —è–∫—â–æ –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ
    let author = await Author.findOne({ first_name: "Jim", family_name: "Jones" });
    if (!author) {
      author = new Author({
        first_name: "Jim",
        family_name: "Jones"
      });
      await author.save();
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∫–Ω–∏–≥—É
    const book = new Book({
      title: "Test with any name",
      author: author._id,  // –ó–≤'—è–∑—É—î–º–æ –∫–Ω–∏–≥—É –∑ –∞–≤—Ç–æ—Ä–æ–º
      summary: "This is a test book",
      isbn: "123-456-789",
      genre: [],  // –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –∂–∞–Ω—Ä–∏
    });

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–Ω–∏–≥—É
    await book.save();
    console.log("Test data has been saved.");

    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é
    mongoose.connection.close();
  } catch (error) {
    console.error("Error populating data:", error);
  }
}

createTestData();*
///////////////////////////////////
const mongoose = require("mongoose");
const Author = require("./models/author");
const Book = require("./models/book");

async function createTestData() {
  try {
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
    await mongoose.connect('mongodb://localhost:27017/yourdb');
    console.log("Connected to MongoDB");

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î –∞–≤—Ç–æ—Ä, —è–∫—â–æ –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ
    let author = await Author.findOne({ first_name: "Jim", family_name: "Jones" });
    if (!author) {
      author = new Author({
        first_name: "Jim",
        family_name: "Jones",
        name: "Jim Jones" // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ name
      });
      await author.save();
      console.log("Author saved:", author);
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∫–Ω–∏–≥—É
    const book = new Book({
      title: "Test with any name",
      author: author._id, // –ó–≤'—è–∑—É—î–º–æ –∫–Ω–∏–≥—É –∑ –∞–≤—Ç–æ—Ä–æ–º
      summary: "This is a test book",
      isbn: "123-456-789",
      genre: [],
    });

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–Ω–∏–≥—É
    await book.save();
    console.log("Test data has been saved.");

    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
    mongoose.connection.close();
  } catch (error) {
    console.error("Error populating data:", error);
  }
}

mongoose.connect('mongodb://localhost:27017/yourdb')
  .then(() => {
    createTestData();
  })
  .catch((error) => {
    console.error('Error connecting to MongoDB:', error);
  });
  //////////////////////////////////////////////////////
  const express = require('express');
const mongoose = require("mongoose");
const Author = require("./models/author");
const Book = require("./models/book");
//
const catalogRouter = require("./routes/catalog"); // –Ü–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–ª—è "–∫–∞—Ç–∞–ª–æ–≥—É" —Å–∞–π—Ç—É
//


const app = express();
const PORT = 3000;

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Pug —è–∫ —à–∞–±–ª–æ–Ω—ñ–∑–∞—Ç–æ—Ä–∞
app.set('view engine', 'pug');
app.set('views', './views');

//
app.use("/catalog", catalogRouter); // –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∫–∞—Ç–∞–ª–æ–≥—É –¥–æ –ª–∞–Ω—Ü—é–∂–∫–∞ –ø—Ä–æ–º—ñ–∂–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è.
//

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
mongoose.connect('mongodb://localhost:27017/yourdb', {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => {
  console.log("‚úÖ Connected to MongoDB");
  createTestData(); // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
})
.catch((err) => {
  console.error("‚ùå MongoDB connection error:", err);
});

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
async function createTestData() {
  try {
    let author = await Author.findOne({ first_name: "Jim", family_name: "Jones" });

    if (!author) {
      author = new Author({
        first_name: "Jim",
        family_name: "Jones",
        name: "Jim Jones"
      });
      await author.save();
      console.log("‚úÖ Author saved");
    }

    const existingBook = await Book.findOne({ title: "Test with any name" });
    if (!existingBook) {
      const book = new Book({
        title: "Test with any name",
        author: author._id,
        summary: "This is a test book",
        isbn: "123-456-789",
        genre: [],
      });

      await book.save();
      console.log("‚úÖ Test book saved");
    }
  } catch (err) {
    console.error("‚ùå Error saving test data:", err);
  }
}

// –†–æ—É—Ç –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
app.get('/', async (req, res) => {
  try {
    const books = await Book.find().populate('author');
    res.render('index', { title: '–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥', books });
  } catch (err) {
    res.status(500).send("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö");
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ Server is running at http://localhost:${PORT}`);
});
app.get('/queries/books', async (req, res) => {
  try {
    const books = await Book.find().populate('author');
    res.render('index', { title: '–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥', books });
  } catch (err) {
    console.error(err);
    res.status(500).send('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});
////////////////////////////////////////////////////////////
const express = require('express');
const path = require('path');
const mongoose = require("mongoose");
const createError = require('http-errors');
const logger = require('morgan');

const indexRouter = require('./routes/index');
const usersRouter = require('./routes/users');
const catalogRouter = require('./routes/catalog');

const Author = require("./models/author");
const Book = require("./models/book");

const app = express();
const PORT = 3000;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect('mongodb://localhost:27017/yourdb', {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => {
  console.log("‚úÖ Connected to MongoDB");
  createTestData();
})
.catch((err) => {
  console.error("‚ùå MongoDB connection error:", err);
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(path.join(__dirname, 'public')));

// –ú–∏–¥–ª–≤–∞—Ä—ã
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Pug –∫–∞–∫ —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');

// –†–æ—É—Ç–µ—Ä–∏
app.use('/', indexRouter);
app.use('/users', usersRouter);
app.use('/catalog', catalogRouter);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫
app.use(function(req, res, next) {
  next(createError(404));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
app.use(function(err, req, res, next) {
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  res.status(err.status || 500);
  res.render('error');
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function createTestData() {
  try {
    let author = await Author.findOne({ first_name: "Jim", family_name: "Jones" });

    if (!author) {
      author = new Author({
        first_name: "Jim",
        family_name: "Jones",
        name: "Jim Jones"
      });
      await author.save();
      console.log("‚úÖ Author saved");
    }

    const existingBook = await Book.findOne({ title: "Test with any name" });
    if (!existingBook) {
      const book = new Book({
        title: "Test with any name",
        author: author._id,
        summary: "This is a test book",
        isbn: "123-456-789",
        genre: [],
      });

      await book.save();
      console.log("‚úÖ Test book saved");
    }
  } catch (err) {
    console.error("‚ùå Error saving test data:", err);
  }
}

app.listen(PORT, () => {
  console.log(`üöÄ Server is running at http://localhost:${PORT}`);
});
/////////////////////////////////////////////////////////////////
const express = require('express');
const path = require('path');
const mongoose = require("mongoose");
const createError = require('http-errors');
const logger = require('morgan');

const indexRouter = require('./routes/index');
const usersRouter = require('./routes/users');
const catalogRouter = require('./routes/catalog');
const bookinstanceRouter = require('./routes/bookinstance'); // ‚úÖ –î–û–î–ê–ù–û

const Author = require("./models/author");
const Book = require("./models/book");

const app = express();
const PORT = 3000;

/* –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
mongoose.connect('mongodb://localhost:27017/yourdb', {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => {
  console.log("‚úÖ Connected to MongoDB");
  createTestData();
})
.catch((err) => {
  console.error("‚ùå MongoDB connection error:", err);
});
require('dotenv').config();
mongoose.connect('mongodb+srv://mruban:Allomiro232730@mariya.wurif.mongodb.net/?retryWrites=true&w=majority&appName=Mariya', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});


// –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏
app.use(express.static(path.join(__dirname, 'public')));

// –ú—ñ–¥–ª–≤–∞—Ä–∏
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// Pug —à–∞–±–ª–æ–Ω–∏
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');

// –†–æ—É—Ç–µ—Ä–∏
app.use('/', indexRouter);
app.use('/users', usersRouter);
app.use('/catalog', catalogRouter);
app.use('/catalog/bookinstances', bookinstanceRouter); // ‚úÖ –î–û–î–ê–ù–û

// –û–±—Ä–æ–±–∫–∞ 404
app.use(function(req, res, next) {
  next(createError(404));
});

// –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫
app.use(function(err, req, res, next) {
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  res.status(err.status || 500);
  res.render('error');
});

// –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
async function createTestData() {
  try {
    let author = await Author.findOne({ first_name: "Jim", family_name: "Jones" });

    if (!author) {
      author = new Author({
        first_name: "Jim",
        family_name: "Jones",
        name: "Jim Jones"
      });
      await author.save();
      console.log("‚úÖ Author saved");
    }

    const existingBook = await Book.findOne({ title: "Test with any name" });
    if (!existingBook) {
      const book = new Book({
        title: "Test with any name",
        author: author._id,
        summary: "This is a test book",
        isbn: "123-456-789",
        genre: [],
      });

      await book.save();
      console.log("‚úÖ Test book saved");
    }
  } catch (err) {
    console.error("‚ùå Error saving test data:", err);
  }
}

app.listen(PORT, () => {
  console.log(`üöÄ Server is running at http://localhost:${PORT}`);
});
//////////////////////////////////////////////////////
const express = require('express');
const path = require('path');
const mongoose = require('mongoose');
const createError = require('http-errors');
const logger = require('morgan');
require('dotenv').config(); // ‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–º—ñ–Ω–Ω—ñ –∑ .env

const indexRouter = require('./routes/index');
const usersRouter = require('./routes/users');
const catalogRouter = require('./routes/catalog');
const bookinstanceRouter = require('./routes/bookinstance');

const Author = require("./models/author");
const Book = require("./models/book");

const app = express();
const PORT = 3000;

// ‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => {
  console.log("‚úÖ Connected to MongoDB");
  createTestData(); // –ú–æ–∂–µ—à –ø—Ä–∏–±—Ä–∞—Ç–∏, —è–∫—â–æ –Ω–µ —Ç—Ä–µ–±–∞
})
.catch((err) => {
  console.error("‚ùå MongoDB connection error:", err);
});

// –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏
app.use(express.static(path.join(__dirname, 'public')));

// –ú—ñ–¥–ª–≤–∞—Ä–∏
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// Pug —à–∞–±–ª–æ–Ω–∏
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');

// –†–æ—É—Ç–µ—Ä–∏
app.use('/', indexRouter);
app.use('/users', usersRouter);
app.use('/catalog', catalogRouter);
app.use('/catalog/bookinstances', bookinstanceRouter);

// –û–±—Ä–æ–±–∫–∞ 404
app.use(function(req, res, next) {
  next(createError(404));
});

// –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫
app.use(function(err, req, res, next) {
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  res.status(err.status || 500);
  res.render('error');
});

// –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
async function createTestData() {
  try {
    let author = await Author.findOne({ first_name: "Jim", family_name: "Jones" });

    if (!author) {
      author = new Author({
        first_name: "Jim",
        family_name: "Jones",
        name: "Jim Jones"
      });
      await author.save();
      console.log("‚úÖ Author saved");
    }

    const existingBook = await Book.findOne({ title: "Test with any name" });
    if (!existingBook) {
      const book = new Book({
        title: "Test with any name",
        author: author._id,
        summary: "This is a test book",
        isbn: "123-456-789",
        genre: [],
      });

      await book.save();
      console.log("‚úÖ Test book saved");
    }
  } catch (err) {
    console.error("‚ùå Error saving test data:", err);
  }
}

app.listen(PORT, () => {
  console.log(`üöÄ Server is running at http://localhost:${PORT}`);
});*//////////////////////////////////
////////////////////////////////////////////
const express = require('express');
const path = require('path');
const mongoose = require('mongoose');
const createError = require('http-errors');
const logger = require('morgan');
const compression = require('compression');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

const indexRouter = require('./routes/index');
const usersRouter = require('./routes/users');
const catalogRouter = require('./routes/catalog');
const bookinstanceRouter = require('./routes/bookinstance');

const Author = require("./models/author");
const Book = require("./models/book");

const app = express();
const PORT = process.env.PORT || 3000;

// MongoDB connection
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => {
  console.log("‚úÖ Connected to MongoDB");
  createTestData();
})
.catch((err) => {
  console.error("‚ùå MongoDB connection error:", err);
});

// Middleware setup
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(compression());
app.use(helmet());

app.use(
  helmet.contentSecurityPolicy({
    directives: {
      "script-src": ["'self'", "code.jquery.com", "cdn.jsdelivr.net"]
    }
  })
);

// Rate Limiting
const limiter = rateLimit({
  windowMs: 1 * 60 * 1000,
  max: 20,
});
app.use(limiter);

// Static files
app.use(express.static(path.join(__dirname, 'public')));

// Pug template engine
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');

// Routers
app.use('/', indexRouter);
app.use('/users', usersRouter);
app.use('/catalog', catalogRouter);
app.use('/catalog/bookinstances', bookinstanceRouter);

// 404 handler
app.use((req, res, next) => {
  next(createError(404));
});

// Error handler
app.use((err, req, res, next) => {
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};
  res.status(err.status || 500);
  res.render('error');
});

// Test data
async function createTestData() {
  try {
    let author = await Author.findOne({ first_name: "Jim", family_name: "Jones" });
    if (!author) {
      author = new Author({ first_name: "Jim", family_name: "Jones" });
      await author.save();
      console.log("‚úÖ Author saved");
    }

    const existingBook = await Book.findOne({ title: "Test with any name" });
    if (!existingBook) {
      const book = new Book({
        title: "Test with any name",
        author: author._id,
        summary: "This is a test book",
        isbn: "123-456-789",
        genre: [],
      });
      await book.save();
      console.log("‚úÖ Test book saved");
    }
  } catch (err) {
    console.error("‚ùå Error saving test data:", err);
  }
}

app.listen(PORT, () => {
  console.log(`üöÄ Server is running at http://localhost:${PORT}`);
});


